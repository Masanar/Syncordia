defmodule Syncordian.Types do
  @moduledoc """
      This module provides the types used in the Syncordian implementation
  """
  use TypeCheck

  @typedoc """
    Type that represents the status of a Syncordian document line, those are:
        - :tombstone: the line was deleted by the user, but still exists in the document.
        - :aura: the line was stash due to a clock inconsistency, and will be reinserted
            in the document when the stash is resolved.
        - :settled: is a 'normal' line, that is not tombstone or aura.
  """
  @type status :: :tombstone | :aura | :settled

  @typedoc """
      Type that represents the content of a Syncordian document line
  """
  @type content :: String.t()

  @typedoc """
      Type that represents the signature of a Syncordian document line
  """
  @type signature :: String.t()

  @typedoc """
      Type that represents the vector clock of a Syncordian peer, are the same proposed by
      Lamport in 1978 (?)
  """
  @type vector_clock :: [integer()]

  @typedoc """
      Type that represents the peer id
  """
  @type peer_id :: integer()

  @typedoc """
      Type that represents the position identifier of a Syncordian document's line
  """
  @type line_id :: float()

  @typedoc """
      Type that represents a line of a Syncordian document
  """
  @type line :: %{
          line_id: line_id(),
          content: content(),
          signature: signature(),
          peer_id: peer_id(),
          status: status(),
          insertion_attempts: integer()
        }

  @typedoc """
      Type that represents a Syncordian document, that is a list of lines, each line has an
      unique position identifier and a content
  """
  @type document :: [line]

  @typedoc """
      Type that represents the individual replica of the Syncordian document for each peer
      The pid is the actual pid generated by the Erlang VM when the peer is started, based
      on the peer_id given by the 'user'. The deleted_limit is a fixed number of lines that
      can be deleted from the document, after that the peer will call the garbage collection
      process in the whole network i.e. the update operation.
  """
  @type peer :: %{
          peer_id: peer_id(),
          document: document(),
          pid: pid(),
          deleted_count: integer(),
          deleted_limit: integer(),
          vector_clock: vector_clock()
        }
end
